# Generated from YAPL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,44,383,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,16,4,16,211,8,16,11,16,12,16,212,1,17,1,17,5,17,
        217,8,17,10,17,12,17,220,9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,237,8,18,10,18,12,18,
        240,9,18,3,18,242,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,251,
        8,19,1,19,5,19,254,8,19,10,19,12,19,257,9,19,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
        1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,
        1,39,1,40,1,40,1,40,1,40,5,40,307,8,40,10,40,12,40,310,9,40,1,40,
        1,40,1,41,1,41,1,41,1,41,5,41,318,8,41,10,41,12,41,321,9,41,1,41,
        1,41,1,41,1,41,1,41,1,42,4,42,329,8,42,11,42,12,42,330,1,42,1,42,
        1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,
        1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,
        1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,
        3,61,374,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,319,0,64,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,0,91,0,
        93,0,95,0,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,
        0,117,0,119,0,121,0,123,0,125,0,127,0,1,0,27,1,0,48,57,1,0,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,65,90,2,0,9,9,92,92,2,0,10,10,13,
        13,4,0,9,10,13,13,34,34,92,92,3,0,9,10,12,13,32,32,2,0,65,65,97,
        97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,
        101,2,0,70,70,102,102,2,0,72,72,104,104,2,0,73,73,105,105,2,0,76,
        76,108,108,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,
        2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,86,86,
        118,118,2,0,87,87,119,119,8,0,34,34,47,47,92,92,98,98,102,102,110,
        110,114,114,116,116,3,0,48,57,65,70,97,102,376,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,129,1,0,0,0,3,135,1,0,0,0,5,140,
        1,0,0,0,7,143,1,0,0,0,9,146,1,0,0,0,11,149,1,0,0,0,13,158,1,0,0,
        0,15,165,1,0,0,0,17,170,1,0,0,0,19,175,1,0,0,0,21,180,1,0,0,0,23,
        186,1,0,0,0,25,190,1,0,0,0,27,194,1,0,0,0,29,200,1,0,0,0,31,205,
        1,0,0,0,33,210,1,0,0,0,35,214,1,0,0,0,37,241,1,0,0,0,39,243,1,0,
        0,0,41,260,1,0,0,0,43,262,1,0,0,0,45,264,1,0,0,0,47,266,1,0,0,0,
        49,268,1,0,0,0,51,270,1,0,0,0,53,272,1,0,0,0,55,274,1,0,0,0,57,276,
        1,0,0,0,59,278,1,0,0,0,61,280,1,0,0,0,63,282,1,0,0,0,65,284,1,0,
        0,0,67,286,1,0,0,0,69,288,1,0,0,0,71,290,1,0,0,0,73,292,1,0,0,0,
        75,295,1,0,0,0,77,298,1,0,0,0,79,300,1,0,0,0,81,302,1,0,0,0,83,313,
        1,0,0,0,85,328,1,0,0,0,87,334,1,0,0,0,89,336,1,0,0,0,91,338,1,0,
        0,0,93,340,1,0,0,0,95,342,1,0,0,0,97,344,1,0,0,0,99,346,1,0,0,0,
        101,348,1,0,0,0,103,350,1,0,0,0,105,352,1,0,0,0,107,354,1,0,0,0,
        109,356,1,0,0,0,111,358,1,0,0,0,113,360,1,0,0,0,115,362,1,0,0,0,
        117,364,1,0,0,0,119,366,1,0,0,0,121,368,1,0,0,0,123,370,1,0,0,0,
        125,375,1,0,0,0,127,381,1,0,0,0,129,130,3,93,46,0,130,131,3,105,
        52,0,131,132,3,89,44,0,132,133,3,115,57,0,133,134,3,115,57,0,134,
        2,1,0,0,0,135,136,3,97,48,0,136,137,3,105,52,0,137,138,3,115,57,
        0,138,139,3,97,48,0,139,4,1,0,0,0,140,141,3,99,49,0,141,142,3,103,
        51,0,142,6,1,0,0,0,143,144,3,103,51,0,144,145,3,99,49,0,145,8,1,
        0,0,0,146,147,3,103,51,0,147,148,3,107,53,0,148,10,1,0,0,0,149,150,
        3,103,51,0,150,151,3,107,53,0,151,152,3,101,50,0,152,153,3,97,48,
        0,153,154,3,113,56,0,154,155,3,103,51,0,155,156,3,117,58,0,156,157,
        3,115,57,0,157,12,1,0,0,0,158,159,3,103,51,0,159,160,3,115,57,0,
        160,161,3,119,59,0,161,162,3,109,54,0,162,163,3,103,51,0,163,164,
        3,95,47,0,164,14,1,0,0,0,165,166,3,105,52,0,166,167,3,109,54,0,167,
        168,3,109,54,0,168,169,3,111,55,0,169,16,1,0,0,0,170,171,3,111,55,
        0,171,172,3,109,54,0,172,173,3,109,54,0,173,174,3,105,52,0,174,18,
        1,0,0,0,175,176,3,117,58,0,176,177,3,101,50,0,177,178,3,97,48,0,
        178,179,3,107,53,0,179,20,1,0,0,0,180,181,3,121,60,0,181,182,3,101,
        50,0,182,183,3,103,51,0,183,184,3,105,52,0,184,185,3,97,48,0,185,
        22,1,0,0,0,186,187,3,107,53,0,187,188,3,97,48,0,188,189,3,121,60,
        0,189,24,1,0,0,0,190,191,3,107,53,0,191,192,3,109,54,0,192,193,3,
        117,58,0,193,26,1,0,0,0,194,195,5,102,0,0,195,196,5,97,0,0,196,197,
        5,108,0,0,197,198,5,115,0,0,198,199,5,101,0,0,199,28,1,0,0,0,200,
        201,5,116,0,0,201,202,5,114,0,0,202,203,5,117,0,0,203,204,5,101,
        0,0,204,30,1,0,0,0,205,206,3,105,52,0,206,207,3,97,48,0,207,208,
        3,117,58,0,208,32,1,0,0,0,209,211,7,0,0,0,210,209,1,0,0,0,211,212,
        1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,34,1,0,0,0,214,218,7,
        1,0,0,215,217,7,2,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,
        0,0,0,218,219,1,0,0,0,219,36,1,0,0,0,220,218,1,0,0,0,221,222,5,115,
        0,0,222,223,5,101,0,0,223,224,5,108,0,0,224,242,5,102,0,0,225,226,
        5,83,0,0,226,227,5,69,0,0,227,228,5,76,0,0,228,229,5,70,0,0,229,
        230,5,95,0,0,230,231,5,84,0,0,231,232,5,89,0,0,232,233,5,80,0,0,
        233,242,5,69,0,0,234,238,7,3,0,0,235,237,7,2,0,0,236,235,1,0,0,0,
        237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,242,1,0,0,0,
        240,238,1,0,0,0,241,221,1,0,0,0,241,225,1,0,0,0,241,234,1,0,0,0,
        242,38,1,0,0,0,243,255,5,34,0,0,244,251,7,4,0,0,245,246,5,13,0,0,
        246,251,5,10,0,0,247,251,7,5,0,0,248,249,5,92,0,0,249,251,5,34,0,
        0,250,244,1,0,0,0,250,245,1,0,0,0,250,247,1,0,0,0,250,248,1,0,0,
        0,251,254,1,0,0,0,252,254,8,6,0,0,253,250,1,0,0,0,253,252,1,0,0,
        0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,
        0,257,255,1,0,0,0,258,259,5,34,0,0,259,40,1,0,0,0,260,261,5,59,0,
        0,261,42,1,0,0,0,262,263,5,123,0,0,263,44,1,0,0,0,264,265,5,125,
        0,0,265,46,1,0,0,0,266,267,5,58,0,0,267,48,1,0,0,0,268,269,5,44,
        0,0,269,50,1,0,0,0,270,271,5,40,0,0,271,52,1,0,0,0,272,273,5,41,
        0,0,273,54,1,0,0,0,274,275,5,46,0,0,275,56,1,0,0,0,276,277,5,64,
        0,0,277,58,1,0,0,0,278,279,5,126,0,0,279,60,1,0,0,0,280,281,5,42,
        0,0,281,62,1,0,0,0,282,283,5,43,0,0,283,64,1,0,0,0,284,285,5,45,
        0,0,285,66,1,0,0,0,286,287,5,47,0,0,287,68,1,0,0,0,288,289,5,61,
        0,0,289,70,1,0,0,0,290,291,5,60,0,0,291,72,1,0,0,0,292,293,5,60,
        0,0,293,294,5,61,0,0,294,74,1,0,0,0,295,296,5,60,0,0,296,297,5,45,
        0,0,297,76,1,0,0,0,298,299,5,124,0,0,299,78,1,0,0,0,300,301,5,38,
        0,0,301,80,1,0,0,0,302,303,5,45,0,0,303,304,5,45,0,0,304,308,1,0,
        0,0,305,307,8,5,0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,
        0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,312,6,40,
        0,0,312,82,1,0,0,0,313,314,5,40,0,0,314,315,5,42,0,0,315,319,1,0,
        0,0,316,318,9,0,0,0,317,316,1,0,0,0,318,321,1,0,0,0,319,320,1,0,
        0,0,319,317,1,0,0,0,320,322,1,0,0,0,321,319,1,0,0,0,322,323,5,42,
        0,0,323,324,5,41,0,0,324,325,1,0,0,0,325,326,6,41,0,0,326,84,1,0,
        0,0,327,329,7,7,0,0,328,327,1,0,0,0,329,330,1,0,0,0,330,328,1,0,
        0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,6,42,0,0,333,86,1,0,
        0,0,334,335,9,0,0,0,335,88,1,0,0,0,336,337,7,8,0,0,337,90,1,0,0,
        0,338,339,7,9,0,0,339,92,1,0,0,0,340,341,7,10,0,0,341,94,1,0,0,0,
        342,343,7,11,0,0,343,96,1,0,0,0,344,345,7,12,0,0,345,98,1,0,0,0,
        346,347,7,13,0,0,347,100,1,0,0,0,348,349,7,14,0,0,349,102,1,0,0,
        0,350,351,7,15,0,0,351,104,1,0,0,0,352,353,7,16,0,0,353,106,1,0,
        0,0,354,355,7,17,0,0,355,108,1,0,0,0,356,357,7,18,0,0,357,110,1,
        0,0,0,358,359,7,19,0,0,359,112,1,0,0,0,360,361,7,20,0,0,361,114,
        1,0,0,0,362,363,7,21,0,0,363,116,1,0,0,0,364,365,7,22,0,0,365,118,
        1,0,0,0,366,367,7,23,0,0,367,120,1,0,0,0,368,369,7,24,0,0,369,122,
        1,0,0,0,370,373,5,92,0,0,371,374,7,25,0,0,372,374,3,125,62,0,373,
        371,1,0,0,0,373,372,1,0,0,0,374,124,1,0,0,0,375,376,5,117,0,0,376,
        377,3,127,63,0,377,378,3,127,63,0,378,379,3,127,63,0,379,380,3,127,
        63,0,380,126,1,0,0,0,381,382,7,26,0,0,382,128,1,0,0,0,12,0,212,218,
        238,241,250,253,255,308,319,330,373,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    ELSE = 2
    FI = 3
    IF = 4
    IN = 5
    INHERITS = 6
    ISVOID = 7
    LOOP = 8
    POOL = 9
    THEN = 10
    WHILE = 11
    NEW = 12
    NOT = 13
    FALSE = 14
    TRUE = 15
    LET = 16
    INTEGER = 17
    ID = 18
    TYPE = 19
    STRING = 20
    SEMICOLON = 21
    OPENBRACE = 22
    CLOSEBRACE = 23
    COLON = 24
    COMMA = 25
    OPENPARENTHESES = 26
    CLOSEPARENTHESES = 27
    DOT = 28
    AT = 29
    TILDE = 30
    MUL = 31
    ADD = 32
    SUB = 33
    DIV = 34
    EQUAL = 35
    LT = 36
    LTEQ = 37
    ASSIGN = 38
    OR = 39
    AND = 40
    SINGLECOMMENT = 41
    MULTICOMMENT = 42
    WS = 43
    ERROR = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'false'", "'true'", "';'", "'{'", "'}'", "':'", "','", "'('", 
            "')'", "'.'", "'@'", "'~'", "'*'", "'+'", "'-'", "'/'", "'='", 
            "'<'", "'<='", "'<-'", "'|'", "'&'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", "LOOP", 
            "POOL", "THEN", "WHILE", "NEW", "NOT", "FALSE", "TRUE", "LET", 
            "INTEGER", "ID", "TYPE", "STRING", "SEMICOLON", "OPENBRACE", 
            "CLOSEBRACE", "COLON", "COMMA", "OPENPARENTHESES", "CLOSEPARENTHESES", 
            "DOT", "AT", "TILDE", "MUL", "ADD", "SUB", "DIV", "EQUAL", "LT", 
            "LTEQ", "ASSIGN", "OR", "AND", "SINGLECOMMENT", "MULTICOMMENT", 
            "WS", "ERROR" ]

    ruleNames = [ "CLASS", "ELSE", "FI", "IF", "IN", "INHERITS", "ISVOID", 
                  "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "FALSE", 
                  "TRUE", "LET", "INTEGER", "ID", "TYPE", "STRING", "SEMICOLON", 
                  "OPENBRACE", "CLOSEBRACE", "COLON", "COMMA", "OPENPARENTHESES", 
                  "CLOSEPARENTHESES", "DOT", "AT", "TILDE", "MUL", "ADD", 
                  "SUB", "DIV", "EQUAL", "LT", "LTEQ", "ASSIGN", "OR", "AND", 
                  "SINGLECOMMENT", "MULTICOMMENT", "WS", "ERROR", "A", "B", 
                  "C", "D", "E", "F", "H", "I", "L", "N", "O", "P", "R", 
                  "S", "T", "V", "W", "ESC", "UNICODE", "HEX" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


