# Generated from YAPL.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,229,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,31,1,31,1,32,1,32,5,32,195,8,32,10,32,12,32,198,9,32,1,33,1,33,
        5,33,202,8,33,10,33,12,33,205,9,33,1,34,4,34,208,8,34,11,34,12,34,
        209,1,35,1,35,1,35,1,35,5,35,216,8,35,10,35,12,35,219,9,35,1,35,
        1,35,1,36,4,36,224,8,36,11,36,12,36,225,1,36,1,36,0,0,37,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
        37,1,0,7,1,0,65,90,3,0,48,57,65,90,97,122,1,0,97,122,1,0,48,57,3,
        0,10,10,13,13,34,34,4,0,98,98,102,102,110,110,116,116,3,0,9,10,12,
        13,32,32,234,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,81,1,0,0,0,5,90,
        1,0,0,0,7,92,1,0,0,0,9,94,1,0,0,0,11,96,1,0,0,0,13,98,1,0,0,0,15,
        100,1,0,0,0,17,103,1,0,0,0,19,105,1,0,0,0,21,108,1,0,0,0,23,113,
        1,0,0,0,25,118,1,0,0,0,27,121,1,0,0,0,29,125,1,0,0,0,31,127,1,0,
        0,0,33,130,1,0,0,0,35,132,1,0,0,0,37,136,1,0,0,0,39,138,1,0,0,0,
        41,140,1,0,0,0,43,142,1,0,0,0,45,144,1,0,0,0,47,147,1,0,0,0,49,153,
        1,0,0,0,51,158,1,0,0,0,53,163,1,0,0,0,55,167,1,0,0,0,57,170,1,0,
        0,0,59,174,1,0,0,0,61,181,1,0,0,0,63,186,1,0,0,0,65,192,1,0,0,0,
        67,199,1,0,0,0,69,207,1,0,0,0,71,211,1,0,0,0,73,223,1,0,0,0,75,76,
        5,99,0,0,76,77,5,108,0,0,77,78,5,97,0,0,78,79,5,115,0,0,79,80,5,
        115,0,0,80,2,1,0,0,0,81,82,5,105,0,0,82,83,5,110,0,0,83,84,5,104,
        0,0,84,85,5,101,0,0,85,86,5,114,0,0,86,87,5,105,0,0,87,88,5,116,
        0,0,88,89,5,115,0,0,89,4,1,0,0,0,90,91,5,123,0,0,91,6,1,0,0,0,92,
        93,5,125,0,0,93,8,1,0,0,0,94,95,5,40,0,0,95,10,1,0,0,0,96,97,5,41,
        0,0,97,12,1,0,0,0,98,99,5,58,0,0,99,14,1,0,0,0,100,101,5,60,0,0,
        101,102,5,45,0,0,102,16,1,0,0,0,103,104,5,44,0,0,104,18,1,0,0,0,
        105,106,5,105,0,0,106,107,5,102,0,0,107,20,1,0,0,0,108,109,5,116,
        0,0,109,110,5,104,0,0,110,111,5,101,0,0,111,112,5,110,0,0,112,22,
        1,0,0,0,113,114,5,101,0,0,114,115,5,108,0,0,115,116,5,115,0,0,116,
        117,5,101,0,0,117,24,1,0,0,0,118,119,5,111,0,0,119,120,5,114,0,0,
        120,26,1,0,0,0,121,122,5,97,0,0,122,123,5,110,0,0,123,124,5,100,
        0,0,124,28,1,0,0,0,125,126,5,60,0,0,126,30,1,0,0,0,127,128,5,60,
        0,0,128,129,5,61,0,0,129,32,1,0,0,0,130,131,5,61,0,0,131,34,1,0,
        0,0,132,133,5,110,0,0,133,134,5,111,0,0,134,135,5,116,0,0,135,36,
        1,0,0,0,136,137,5,43,0,0,137,38,1,0,0,0,138,139,5,45,0,0,139,40,
        1,0,0,0,140,141,5,42,0,0,141,42,1,0,0,0,142,143,5,47,0,0,143,44,
        1,0,0,0,144,145,5,102,0,0,145,146,5,105,0,0,146,46,1,0,0,0,147,148,
        5,119,0,0,148,149,5,104,0,0,149,150,5,105,0,0,150,151,5,108,0,0,
        151,152,5,101,0,0,152,48,1,0,0,0,153,154,5,108,0,0,154,155,5,111,
        0,0,155,156,5,111,0,0,156,157,5,112,0,0,157,50,1,0,0,0,158,159,5,
        112,0,0,159,160,5,111,0,0,160,161,5,111,0,0,161,162,5,108,0,0,162,
        52,1,0,0,0,163,164,5,108,0,0,164,165,5,101,0,0,165,166,5,116,0,0,
        166,54,1,0,0,0,167,168,5,105,0,0,168,169,5,110,0,0,169,56,1,0,0,
        0,170,171,5,110,0,0,171,172,5,101,0,0,172,173,5,119,0,0,173,58,1,
        0,0,0,174,175,5,105,0,0,175,176,5,115,0,0,176,177,5,118,0,0,177,
        178,5,111,0,0,178,179,5,105,0,0,179,180,5,100,0,0,180,60,1,0,0,0,
        181,182,5,116,0,0,182,183,5,114,0,0,183,184,5,117,0,0,184,185,5,
        101,0,0,185,62,1,0,0,0,186,187,5,102,0,0,187,188,5,97,0,0,188,189,
        5,108,0,0,189,190,5,115,0,0,190,191,5,101,0,0,191,64,1,0,0,0,192,
        196,7,0,0,0,193,195,7,1,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,
        194,1,0,0,0,196,197,1,0,0,0,197,66,1,0,0,0,198,196,1,0,0,0,199,203,
        7,2,0,0,200,202,7,1,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,
        1,0,0,0,203,204,1,0,0,0,204,68,1,0,0,0,205,203,1,0,0,0,206,208,7,
        3,0,0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,
        0,0,0,210,70,1,0,0,0,211,217,5,34,0,0,212,216,8,4,0,0,213,214,5,
        92,0,0,214,216,7,5,0,0,215,212,1,0,0,0,215,213,1,0,0,0,216,219,1,
        0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,1,
        0,0,0,220,221,5,34,0,0,221,72,1,0,0,0,222,224,7,6,0,0,223,222,1,
        0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,227,1,
        0,0,0,227,228,6,36,0,0,228,74,1,0,0,0,7,0,196,203,209,215,217,225,
        1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    TYPE = 33
    ID = 34
    INTEGER = 35
    STRING = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'inherits'", "'{'", "'}'", "'('", "')'", "':'", 
            "'<-'", "','", "'if'", "'then'", "'else'", "'or'", "'and'", 
            "'<'", "'<='", "'='", "'not'", "'+'", "'-'", "'*'", "'/'", "'fi'", 
            "'while'", "'loop'", "'pool'", "'let'", "'in'", "'new'", "'isvoid'", 
            "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "ID", "INTEGER", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "TYPE", "ID", "INTEGER", "STRING", "WS" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


