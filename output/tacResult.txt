Three Direction Code
A:=
var:=
	var CREATED AS S0
	S0 <- 0
var_EndTask:=
value:=
value_EndTask:=
set_var:=
	S0 <- a0
	S1 <- SELF_TYPE
set_var_EndTask:=
method1:=
	S2 <- SELF_TYPE
method1_EndTask:=
method2:=
	x CREATED AS S3
	t0 <- a1 + a2
	S3 <- t0
	t1 <- A
	t2 <- CALL t1.set_var(S3)
method2_EndTask:=
method3:=
	x CREATED AS S4
	S4 <- a0
	t0 <- A
	t1 <- CALL t0.set_var(S4)
method3_EndTask:=
method4:=
if:=
	a2 < a1 GOTO then
else:=
	x CREATED AS S5
	t0 <- a2 - a1
	S5 <- t0
	t1 <- A
	t2 <- CALL t1.set_var(S5)
	GOTO fi
then:=
	x CREATED AS S6
	t3 <- a1 - a2
	S6 <- t3
	t4 <- A
	t5 <- CALL t4.set_var(S6)
fi:=
method4_EndTask:=
method5:=
	x CREATED AS S7
	S7 <- 1
	y CREATED AS S8
	S8 <- 1
while:=
	S8 > a0 GOTO pool
loop:=
	t0 <- S7 * S8
	S7 <- t0
	t1 <- S8 + 1
	S8 <- t1
	S8 <= a0 GOTO loop
pool:=
	t2 <- A
	t3 <- CALL t2.set_var(S7)
method5_EndTask:=
A_EndTask:=
B:=
method5:=
	x CREATED AS S0
	t0 <- a0 * a0
	S0 <- t0
	t1 <- A
	t2 <- CALL t1.set_var(S0)
method5_EndTask:=
B_EndTask:=
C:=
method6:=
	x CREATED AS S0
	S0 <- a0
	t0 <- A
	t1 <- CALL t0.set_var(S0)
method6_EndTask:=
method5:=
	x CREATED AS S1
	t0 <- a0 * a0
	t0 <- t0 * a0
	S1 <- t0
	t1 <- A
	t2 <- CALL t1.set_var(S1)
method5_EndTask:=
C_EndTask:=
D:=
method7:=
	x CREATED AS S0
	S0 <- a0
if:=
	S0 < 0 GOTO then
else:=
if:=
	0 == S0 GOTO then
else:=
if:=
	1 == S0 GOTO then
else:=
if:=
	2 == S0 GOTO then
else:=
	t0 <- S0 - 3
	t1 <- CALL method7(t0)
	GOTO fi
then:=
	t2 <- 0
fi:=
	GOTO fi
then:=
	t3 <- 0
fi:=
	GOTO fi
then:=
	t4 <- 1
fi:=
	GOTO fi
then:=
	t5 <- CALL method7(S0)
fi:=
method7_EndTask:=
D_EndTask:=
E:=
method6:=
	x CREATED AS S0
	t0 <- a0 + a1
	S0 <- t0
	t1 <- D
	t2 <- CALL t1.value
method6_EndTask:=
E_EndTask:=
Main:=
char:=
	char CREATED AS S0
char_EndTask:=
avar:=
	avar CREATED AS S1
avar_EndTask:=
a_var:=
	a_var CREATED AS S2
a_var_EndTask:=
a_test:=
	a_test CREATED AS S3
a_test_EndTask:=
	t0 <- 1
flag:=
	flag CREATED AS S4
	S4 <- t0
flag_EndTask:=
is_even:=
	x CREATED AS S5
	S5 <- a0
if:=
	S5 < 0 GOTO then
else:=
if:=
	0 == S5 GOTO then
else:=
if:=
	1 == S5 GOTO then
else:=
	t0 <- S5 - 2
	t1 <- CALL is_even(t0)
	GOTO fi
then:=
	t2 <- 0
fi:=
	GOTO fi
then:=
	t3 <- 1
fi:=
	GOTO fi
then:=
	t4 <- CALL is_even(S5)
fi:=
is_even_EndTask:=
main:=
	t0 <- E
	t1 <- CALL t0.method6(66, h)
	S3 <- t1
	t2 <- A
	S1 <- t2
	t3 <- CALL S1.set_var(2)
	t4 <- CALL S1.value
	t5 <- CALL OUT_INT(t4)
if:=
	t6 <- CALL S1.value
	t7 <- CALL is_even(t6)
	t7 == 1 GOTO then
else:=
	t8 <- CALL OUT_STRING( es impar!\n)
	GOTO fi
then:=
	t9 <- CALL OUT_STRING( es par!\n)
fi:=
	t10 <- A
	t11 <- CALL t10.set_var(3)
	S2 <- t11
	t12 <- B
	t13 <- CALL S1.value
	t14 <- CALL S2.value
	t15 <- CALL t12.method2(t13, t14)
	S1 <- t15
	t16 <- CALL S1.value
	t17 <- CALL OUT_INT(t16)
	t18 <- CALL OUT_STRING(\n)
	t19 <- C
	t20 <- CALL S1.value
	t21 <- CALL t19.method6(t20)
	S1 <- t21
	t22 <- CALL S1.value
	t23 <- CALL OUT_INT(t22)
	t24 <- CALL OUT_STRING(\n)
	t25 <- A
	t26 <- CALL t25.set_var(5)
	S2 <- t26
	t27 <- D
	t28 <- CALL S1.value
	t29 <- CALL S2.value
	t30 <- CALL t27.method4(t28, t29)
	S1 <- t30
	t31 <- CALL S1.value
	t32 <- CALL OUT_INT(t31)
	t33 <- CALL OUT_STRING(\n)
	t34 <- CALL S1.set_var(5)
	t35 <- C
	t36 <- CALL S1.value
	t37 <- CALL t35.method5(t36)
	S1 <- t37
	t38 <- CALL S1.value
	t39 <- CALL OUT_INT(t38)
	t40 <- CALL OUT_STRING(\n)
	t41 <- CALL S1.set_var(6)
	t42 <- C
	t43 <- CALL S1.value
	t44 <- CALL t42.method5(t43)
	S1 <- t44
	t45 <- CALL S1.value
	t46 <- CALL OUT_INT(t45)
	t47 <- CALL OUT_STRING(\n)
main_EndTask:=
Main_EndTask:=
