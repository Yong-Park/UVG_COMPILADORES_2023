.text
OUT_STRING:
	lw $a0, 0($s2)
	li $v0, 4
	syscall
	jr $ra
OUT_INT:
	lw $a0, 0($s2)
	li $v0, 1
	syscall
	jr $ra
TYPE_NAME:
	lw $t0, 0($s2)
	la $t1, object_str
	beq $t0, $t1, is_Object
	la $t1, bool_str
	beq $t0, $t1, is_Bool
	jr $ra
is_Object:
	la $t0, object_str
	sw $t0, 0($s2)
	jr $ra
is_Bool:
	la $t0, bool_str
	sw $t0, 0($s2)
	jr $ra
SUBSTR:
	lw $t0, 0($s2)
	lw $t1, 4($s2)
	bge $t0, $t1, SWAP
	j NO_SWAP
SWAP:
	lw $t0, 4($s2)
	lw $t1, 0($s2)
	j NO_SWAP
NO_SWAP:
	move $t3, $t0
	add $t4, $a0, $t0
	move $t5, $a1
	COOPY_LOOP:
		lb $t6, 0($t4)
		sb $t6, 0($t5)
		addi $t4, $t4, 1
		addi $t5, $t5, 1
		addi $t3, $t3, 1
		bne $t3, $t1, COOPY_LOOP
	li $t6, 0
	sb $t6, 0($t5)
	sw $a1, 0($s2)
	jr $ra
ISVOID:
	lw $t0, 0($s2)
	la $t1, void_str
	COMPARE_VOID:
		lb $t2, 0($t0)
		lb $t3, 0($t1)
		beq $t2, $t3, CONTINUE_VOID
		j NOT_EQUAL_VOID
	CONTINUE_VOID:
		addi $t0, $t0, 1
		addi $t1, $t1, 1
		beq $t2, 0, IS_EQUAL_VOID
		j COMPARE_VOID
	IS_EQUAL_VOID:
	la $t0, true_str
	j END_COMPARE_VOID
	NOT_EQUAL_VOID:
	la $t0, false_str
	END_COMPARE_VOID:
	sw $t0, 0($s2)
	jr $ra
ABORT:
	li $v0, 10
	syscall
.text
Main.out:
	la $t0, text_0
	sw $ra, 0($s3)
	sw $t0, 0($s2)
	jal OUT_STRING
	lw $ra, 0($s3)
	li $t0, 2
	sw $t0, 0($s0)
	jr $ra
.text
Main.testee:
	lw $t0, 0($s0)
	sw $t0, 4($s0)
	jr $ra
.text
Main.divisor:
	jr $ra
.text
Main.stop:
	li $t0, 20
	sw $t0, 12($s0)
	jr $ra
.text
while_0:
	li $t0, 1
	bne $t0, 1, pool_0
	j loop_0
.text
loop_0:
	lw $t0, 4($s0)
	li $t1, 1
	add $t0, $t0, $t1
	sw $t0, 4($s0)
	li $t0, 2
	sw $t0, 8($s0)
	sw $ra, 4($s3)
	jal while_1
	lw $ra, 4($s3)
	sw $ra, 12($s3)
	jal if_2
	lw $ra, 12($s3)
	sw $ra, 24($s3)
	jal if_3
	lw $ra, 24($s3)
	j while_0
.text
while_1:
	sw $ra, 8($s3)
	jal if_0
	lw $ra, 8($s3)
	bne $t0, 1, pool_1
	j loop_1
.text
if_0:
	lw $t0, 4($s0)
	lw $t1, 8($s0)
	lw $t2, 8($s0)
	mul $t1, $t1, $t2
	slt $t0, $t0, $t1
	beq $t0, 1, then_0
	j else_0
.text
else_0:
	j if_1
	j fi_0
.text
if_1:
	lw $t0, 4($s0)
	lw $t1, 8($s0)
	lw $t2, 4($s0)
	lw $t3, 8($s0)
	div $t2, $t2, $t3
	mul $t1, $t1, $t2
	sub $t0, $t0, $t1
	li $t1, 0
	beq $t0, $t1, then_1
	j else_1
.text
else_1:
	li $t0, 1
	j fi_1
.text
then_1:
	li $t0, 0
	j fi_1
.text
fi_1:
	jr $ra
.text
then_0:
	li $t0, 0
	j fi_0
.text
fi_0:
	jr $ra
.text
loop_1:
	lw $t0, 8($s0)
	li $t1, 1
	add $t0, $t0, $t1
	sw $t0, 8($s0)
	j while_1
.text
pool_1:
	jr $ra
.text
if_2:
	lw $t0, 4($s0)
	lw $t1, 8($s0)
	lw $t2, 8($s0)
	mul $t1, $t1, $t2
	slt $t0, $t0, $t1
	beq $t0, 1, then_2
	j else_2
.text
else_2:
	li $t0, 0
	j fi_2
.text
then_2:
	lw $t0, 4($s0)
	sw $t0, 0($s0)
	lw $t0, 0($s0)
	sw $ra, 16($s3)
	sw $t0, 0($s2)
	jal OUT_INT
	lw $ra, 16($s3)
	la $t0, text_1
	sw $ra, 20($s3)
	sw $t0, 0($s2)
	jal OUT_STRING
	lw $ra, 20($s3)
	j fi_2
.text
fi_2:
	jr $ra
.text
if_3:
	lw $t0, 12($s0)
	lw $t1, 4($s0)
	ble $t0, $t1, then_3
	j else_3
.text
else_3:
	la $t0, text_2
	j fi_3
.text
then_3:
	la $t0, text_3
	jal ABORT
	j fi_3
.text
fi_3:
	jr $ra
.text
pool_0:
	jr $ra
.data
	object_str: .asciiz "Object"
	void_str: .asciiz "Void"
	bool_str: .asciiz "Bool"
	true_str: .asciiz "true"
	false_str: .asciiz "false"
	substring: .space 40
	text_0: .asciiz "2 is trivially prime.\n"
	text_1: .asciiz " is prime.\n"
	text_2: .asciiz "continue"
	text_3: .asciiz "halt"
.text
main:
	la $sp, 0x7FFFFFC0
	sub $sp, $sp, 16
	sw $ra, 0($sp)
	la $s0, 0($sp)
	la $s1, 4($sp)
	la $s2, 8($sp)
	la $s3, 12($sp)
	la $s4, 16($sp)
	jal Main.out
	jal Main.testee
	jal Main.stop
	jal while_0
	lw $ra, 0($sp)
	add $sp, $sp, 16
	li $v0, 10
	syscall
